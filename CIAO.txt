CIAO: DATA STREAMING FORMAT FOR COSA

Author:	       Mikael Patel
Date:	       2012-11-29
Rev.:	       1.0

This is a desciption of the Cosa data streaming format; Ciao. It
is basically a tagged data format that supports the C/C++ language
data types, declarations (struct) and sequences of these. Pointers are
not allowed in the streaming format.

Each data object is tagged with a prefix byte. This prefix contains a
four bit type tag and a four bit attribute. Additional prefix 
attributes are used for sequence length and user defined types.

All data is stored in MSB first (bigendian aka network order).

Typically usage of this format are; data streaming between systems
(Arduino or other), remote procedure call (as data type declaration
and values may be interpreted as closures), tracing, file format,
etc. 

1. TYPE TAGS

3210 BIT POSITION, UNSIGNED INTEGER NUMBERS
0000 uint8_t, unsigned char
0001 uint16_t, unsigned short 
0010 uint32_t, unsigned long
0011 uint64_t, unsigned long long/*

3210 BIT POSITION, USER DEFINED TYPES
0100 type_t, user data type declaration, 8-bit identity
0101 type_t,  - , 16-bit identity
0110 type_t, user data type data, 8-bit identity
0111 type_t,  - , 16-bit identity

3210 BIT POSITION, SIGNED INTEGER NUMBERS
1000 int8_t, signed char
1001 int16_t, signed short
1010 int32_t, signed long
1011 int64_t, signed long long

3210 BIT POSITION, FLOATING POINT NUMBERS (IEEE 754)/*
1100 binary16_t, half-precision floating-point format
1101 binary32_t, single, float
1110 binary64_t, double
1111 binary80_t, long double

Bit(3) is set for signed data types. Cleared bit(2) indicates for
integer and set for floating point numbers. For integers bit(1..0) is
log2 number of bytes, values 0..3 for 1..8 bytes which is 8..64 bits.

*/ are optional in small embedded systems.

2. DATA SEQUENCE

Data values and sequences are prefixed with the type nibble and
primary attribute nibble and possible secondary attributes. 

TYPE    ATTRIBUTES           	 DESCRIPTION
dddd    nnnn             V*      data value(N=0..7)
dddd    nnnn		 	 reserved (N=8..12)
dddd    1101   N         V*      data value(N=0..255)
dddd    1110   N:N       V*      data value(N=0..64K)
dddd	1111      	 V*0     null terminated sequence 

The attribute is the length of the data sequence [0..64K] using 4, 12
or 20 bits. This is symmetrical for all types except user data type
declaration.

3. DATA TYPE DECLARATION

The type tag may be extended with user defined types. These are given
an 8 or 16-bit unsigned integer number allowing at most 256 + 64K
additional data types. Sequences of user defined data types are
included.  

Note that the elementary data tags are reinterpreted for a data type
declaration. Instead of data values the type prefix is followed by a
possible name string (null terminated). Union is not supported in this
release. 

TYPE    ATTRIBUTES           	 DESCRIPTION
0100    0000        T    V*0     start descriptor(type, name), 8-bit id
0100	nnnn	    	 	 reserved (N=1..254)
0100	1111	    	 	 end of descriptor

TYPE    ATTRIBUTES           	 DESCRIPTION
0101    0000        T:T  V*0     start descriptor(type, name), 16-bit id
0100	nnnn	    	 	 reserved (N=1..254)
0101	1111			 end of descriptor

TYPE    ATTRIBUTES           	 DESCRIPTION
dddd    nnnn             V*0     data<D> type(N=0..7, name)
dddd    nnnn		 	 reserved (N=8..12)
dddd    1101   N         V*0     data<D> type(N=0..255, name)
dddd    1110   N:N       V*0     data<D> type(N=0..64K, name)
dddd	1111      	 V*0     data<D> null terminated sequence(name)

TYPE    ATTRIBUTES           	 DESCRIPTION
0110    nnnn        T    V*0     data<T> type(N=0..7, name), 8-bit id
0110    nnnn		 	 reserved (N=8..12)
0110    1101   N    T    V*0     data<T> type(N=0..255, name)
0110    1110   N:N  T    V*0     data<T> type(N=0..64K, name)
0110	1111        T  	 V*0     data<T> null terminated sequence(name)

TYPE    ATTRIBUTES           	 DESCRIPTION
0111    nnnn        T:T  V*0     data<T> type(N=0..7, name), 16-bit id
0111    nnnn		 	 reserved (N=8..12)
0111    1101   N    T:T  V*0     data<T> type(N=0..255, name)
0111    1110   N:N  T:T  V*0     data<T> type(N=0..64K, name)
0111	1111        T:T	 V*0     data<T> null terminated sequence(name)

A user defined data type may be viewed as a schema and may be used for
both data tables and closures.

4. TYPED DATA SEQUENCE

TYPE    ATTRIBUTES           	 DESCRIPTION
0110    nnnn        T    V*      data<T> value(N=0..7, name), 8-bit id
0110    nnnn		 	 reserved (N=8..12)
0110    1101   N    T    V*      data<T> value(N=0..255, name)
0110    1110   N:N  T    V*      data<T> value(N=0..64K, name)
0110	1111        T	 V*      data<T> value null terminated sequence(name)

TYPE    ATTRIBUTES           	 DESCRIPTION
0111    nnnn        T:T  V*      data<T> value(N=0..7, name), 16-bit id
0111    nnnn		 	 reserved (N=8..12)
0111    1101   N    T:T  V*      data<T> value(N=0..255, name)
0111    1110   N:N  T:T  V*      data<T> value(N=0..64K, name)
0111	1111        T:T	 V*      data<T> value null terminated sequence(name)

A typed data sequence is prefixed with the type identity.
