RETE: COSA DATA DISTRIBUTION AND NETWORK MANAGEMENT PROTOCOL

Author:	       Mikael Patel
Date:	       2013-10-27
Rev.:	       1.0.1

This document shortly describes the messages in the Cose data
distribution and network mangement protocol RETE. The protocol is
inspired by the OMG DDS and SNMP but very much adapted to a small
scale embedded system. 

The protocol contains two primary elements; 1) a management protocol
to control wireless sensor nodes, 2) data distribution service from
sensor nodes.

To achieve low power sensor devices the management protocol is often
piggy-backed on either acknowledgements or transmitted directly after
receiving a data update event from the sensor. A sensor will attempt
to recv management messages for a short period after sending a data
update and before going back to power down mode.

PROTOCOL AND MESSAGES

The network management protocol contains three basic message
pairs. The transactions are always initiated by the supervision node
with a request message. The sensor node may answer with a response
message.

0:GET-REQUEST(id, network, device, path)
1:GET-RESPONSE(id, network, device, status, value)

The GET request message reads an attribute in the sensor device
registry. A transaction identity and path are given. The response
will contain the transaction identity and a status followed by the value
of the attribute if the access was granted and the path was valid.

2:PUT-REQUEST(id, network, device, path, value)
3:PUT-RESPONSE(id, network, device, status)

The PUT request message attempts to modify an attribute in the sensor
device registry. A transaction identity, attribute path and new value
is given. The response will contain the transaction identity and the
status of the request. 

4:APPLY-REQUEST(id, network, device, path, value)
5:APPLY-RESPONSE(id, network, device, status, value)

The APPLY request message will the execution of a function in the
sensor device registry. A transaction identity, function attribute
path and argument block are given. The response is the status of the
request and possible return values from the function. APPLY may be
seen as generalization of the PUT request with a response with the
result. 

6:PUBLISH(network, device, prod-id, path, value)

The PUBLISH message is a message sent from a sensor node. A product
identity together with attribute path and value are given. Receiving
nodes may SUBSCRIBE to messages by filtering this message
type. Filtering may be achieve on network, device, product identity  
and path. 

ENCODING

1. MESSAGE TYPE(uint8_t)

The messages are encoded in the RETE message type sequence. The
numbers are the indexies. 

2. ADDRESSING(uint16_t, uint8_t)

The network/device addressing is part of the parameters to the
Wireless interface.

3. PATH(uint8_t, {uint8_t*})

The path parameter is a length(uint8_t) prefixed sequence of
indexies(uint8_t) in the attribute tree. 

4. PRODUCT IDENTITY(uint16_t)

A product identity(uint16_t) is used to identify the root of a path
within a given attribute tree. 

IMPLEMENTATION

Below is a sketch of message send functions:

int get_request(uint8_t dest, uint8_t id, uint8_t length, uint8_t* path)
{
  iovec_t vec[4];
  iovec_t* vp = vec;
  iovec_arg(vp, &id, sizeof(id));
  iovec_arg(vp, &length, sizeof(length));
  iovec_arg(vp, path, length);
  iovec_end(vp);
  return (rf.send(dest, GET_REQUEST, vec));
}

int publish(uint16_t pid, uint8_t length, uint8_t* path, void* buf, size_t size)
{
  iovec_t vec[5];
  iovec_t* vp = vec;
  iovec_arg(vp, &pid, sizeof(pid));
  iovec_arg(vp, &length, sizeof(length));
  iovec_arg(vp, path, length);
  iovec_arg(vp, buf, size);
  iovec_end(vp);
  return (rf.send(Wireless::BROADCAST, PUBLISH, vec));
}

