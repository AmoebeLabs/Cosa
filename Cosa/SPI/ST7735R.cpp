/**
 * @file Cosa/SPI/ST7735R.cpp
 * @version 1.0
 *
 * @section License
 * Copyright (C) 2012, Mikael Patel
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA  02111-1307  USA
 *
 * @section Description
 * Device driver for ST7735R, 262K Color Single-Chip TFT Controller.
 * 
 * @section See Also
 * Sitronix Technology Corp. ST7735R documentation, V2.1, 2010-02-01.
 *
 * This file is part of the Arduino Che Cosa project.
 */

#include "Cosa/SPI/ST7735R.hh"
#include "Cosa/Trace.hh"

uint8_t ST7735R::script[] PROGMEM = {
  // Software Reset
  SWRESET, 0, 
  // Software Delay 
  SWDELAY, 150,
  // Out of Sleep Mode
  SLPOUT, 0, 
  // Software Delay 
  SWDELAY, 250,
  // Software Delay 
  SWDELAY, 250,
  // Frame Rate Control 1, normal mode
  FRMCTR1, 3, 0x01, 0x2C, 0x2D, 
  // Frame Rate Control 2, idle mode
  FRMCTR2, 3, 0x01, 0x2C, 0x2D, 
  // Frame Rate Control 2, idle mode
  FRMCTR3, 6, 0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D,
  // Display Inversion Control  
  INVCTR, 1, 0x07,
  // Power Control 1, -4.6V, auto mode
  PWCTR1, 3, 0xA2, 0x02, 0x84,
  // Power Control 2, VGH25 = 2.4C, VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
  PWCTR2, 1, 0xC5,
  // Power Control 3, Opamp current small, Boost frequency
  PWCTR3, 2, 0x0A, 0x00,
  // Power Control 4, BCLK/2, Opamp current small & medium low
  PWCTR4, 2, 0x8A, 0x2A,
  // Power Control 5
  PWCTR5, 2, 0x8A, 0xEE,
  // EEPROM Control 1
  VMCTR1, 1, 0x0E,
  // Invert Display Off
  INVOFF, 0,
  // Memory Access Control, row address/col address, bottom to top refresh
  MADCTL, 1, 0xC0,
  // Set Color Mode, 16-bit color
  COLMOD, 1, 0x05,
  // Set Column Address, XSTART = 0, XEND = SCREEN_WIDTH - 1
  CASET, 4, 0x00, 0x00, 0x00, SCREEN_WIDTH - 1,
  // Set Row Address, YSTART = 0, XEND = SCREEN_HEIGHT - 1
  RASET, 4, 0x00, 0x00, 0x00, SCREEN_HEIGHT - 1,
  // Positive Gamma Correction
  GMCTRP1, 16, 
  0x02, 0x1c, 0x07, 0x12, 0x37, 0x32, 0x29, 0x2d,
  0x29, 0x25, 0x2B, 0x39, 0x00, 0x01, 0x03, 0x10,
  // Negative Gamma Correction
  GMCTRN1, 16, 
  0x03, 0x1d, 0x07, 0x06, 0x2E, 0x2C, 0x29, 0x2D,
  0x2E, 0x2E, 0x37, 0x3F, 0x00, 0x00, 0x02, 0x10,
  // Normal Display On
  NORON, 0,
  // Software Delay 
  SWDELAY, 10,
  // Display On
  DISPON, 0,
  // Software Delay 
  SWDELAY, 120,
  // END OF SCRIPT
  SCRIPTEND
};

void 
ST7735R::initiate(const uint8_t* bp)
{
  uint8_t count;
  uint8_t cmd;
  SPI_transaction(m_cs) {
    while ((cmd = pgm_read_byte(bp++)) != SCRIPTEND) {
      count = pgm_read_byte(bp++);
      if (cmd == SWDELAY) {
	DELAY(count);
      } 
      else {
	m_dc.clear();
	spi.exchange(cmd);
	m_dc.set();
	while (count--) spi.exchange(pgm_read_byte(bp++));
      }
    }
  }
}

ST7735R::ST7735R(uint8_t cs, uint8_t dc) :
  SPI::Driver(),
  m_cs(cs, 1),
  m_dc(dc, 1),
  m_color(BLACK),
  m_size(1),
  m_x(0),
  m_y(0)
{
}

void 
ST7735R::write(Command cmd)
{
  SPI_transaction(m_cs) {
    m_dc.clear();
    spi.exchange(cmd);
    m_dc.set();
  }
}

void 
ST7735R::write(Command cmd, uint8_t data)
{
  SPI_transaction(m_cs) {
    m_dc.clear();
    spi.exchange(cmd);
    m_dc.set();
    spi.exchange(data);
  }
}

void 
ST7735R::write(Command cmd, uint16_t data)
{
  SPI_transaction(m_cs) {
    m_dc.clear();
    spi.exchange(cmd);
    m_dc.set();
    spi.exchange(data >> 8);
    spi.exchange(data);
  }
}

void 
ST7735R::write(Command cmd, uint16_t x, uint16_t y)
{
  SPI_transaction(m_cs) {
    m_dc.clear();
    spi.exchange(cmd);
    m_dc.set();
    spi.exchange(x >> 8);
    spi.exchange(x);
    spi.exchange(y >> 8);
    spi.exchange(y);
  }
}

void 
ST7735R::write_P(Command cmd, const void* buffer, uint8_t count)
{
  SPI_transaction(m_cs) {
    m_dc.clear();
    spi.exchange(cmd);
    m_dc.set();
    for (uint8_t* bp = (uint8_t*) buffer; count != 0; bp++, count--)
      spi.exchange(pgm_read_byte(bp));
  }
}

void 
ST7735R::fill_rect(uint8_t x, uint8_t y, uint8_t width, uint8_t height)
{
  set_port(x, y, x + width - 1, y + height - 1);
  SPI_transaction(m_cs) {
    for (x = 0; x < width; x++)
      for (y = 0; y < height; y++) {
	spi.exchange(m_color >> 8);
	spi.exchange(m_color);
      }
  }
}

void
ST7735R::draw_rect(uint8_t x, uint8_t y, uint8_t width, uint8_t height)
{
  draw_horizontal_line(x, y, width);
  draw_vertical_line(x + width, y, height);
  draw_vertical_line(x, y, height);
  draw_horizontal_line(x, y + height, width);
}

#define swap(a, b) { uint16_t t = a; a = b; b = t; }

void 
ST7735R::draw_line(uint8_t _x0, uint8_t _y0, uint8_t _x1, uint8_t _y1)
{
  int16_t x0 = _x0;
  int16_t y0 = _y0;
  int16_t x1 = _x1;
  int16_t y1 = _y1; 

  uint16_t steep = (abs(y1 - y0) > abs(x1 - x0));
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
    swap(x0, x1);
    swap(y0, y1);
  }

  uint16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);

  int16_t err = dx / 2;
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    if (steep) {
      draw_pixel(y0, x0);
    } else {
      draw_pixel(x0, y0);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}

void 
ST7735R::draw_vertical_line(uint8_t x, uint8_t y, uint8_t length)
{
  if (x >= SCREEN_WIDTH) return;
  if (y + length >= SCREEN_HEIGHT) length = SCREEN_HEIGHT - y - 1;
  set_port(x, y, x, y + length);
  SPI_transaction(m_cs) {
    while (length--) {
      spi.exchange(m_color >> 8);
      spi.exchange(m_color);
    }
  }
}

void 
ST7735R::draw_horizontal_line(uint8_t x, uint8_t y, uint8_t length)
{
  if (y >= SCREEN_HEIGHT) return;
  if (x + length >= SCREEN_WIDTH) length = SCREEN_WIDTH - x - 1;
  set_port(x, y, x + length, y + 1);
  SPI_transaction(m_cs) {
    while (length--) {
      spi.exchange(m_color >> 8);
      spi.exchange(m_color);
    }
  }
}

void 
ST7735R::draw_circle(uint8_t x, uint8_t y, uint8_t radius)
{
  int16_t f = 1 - radius;
  int16_t dx = 1;
  int16_t dy = -2 * radius;
  int16_t rx = 0;
  int16_t ry = radius;

  draw_pixel(x, y + radius);
  draw_pixel(x, y - radius);
  draw_pixel(x + radius, y);
  draw_pixel(x - radius, y);
  while (rx < ry) {
    if (f >= 0) {
      ry--;
      dy += 2;
      f += dy;
    }
    rx++;
    dx += 2;
    f += dx;
    draw_pixel(x + rx, y + ry);
    draw_pixel(x - rx, y + ry);
    draw_pixel(x + rx, y - ry);
    draw_pixel(x - rx, y - ry);
    draw_pixel(x + ry, y + rx);
    draw_pixel(x - ry, y + rx);
    draw_pixel(x + ry, y - rx);
    draw_pixel(x - ry, y - rx);
  }
}

void 
ST7735R::fill_circle(uint8_t x, uint8_t y, uint8_t radius)
{
  int16_t f = 1 - radius;
  int16_t dx = 1;
  int16_t dy = -2 * radius;
  int16_t rx = 0;
  int16_t ry = radius;

  draw_vertical_line(x, y - radius, 2*radius + 1);
  while (rx < ry) {
    if (f >= 0) {
      ry--;
      dy += 2;
      f += dy;
    }
    rx++;
    dx += 2;
    f += dx;
    draw_vertical_line(x + rx, y - ry, 2*ry + 1);
    draw_vertical_line(x - rx, y - ry, 2*ry + 1);
    draw_vertical_line(x + ry, y - rx, 2*rx + 1);
    draw_vertical_line(x - ry, y - rx, 2*rx + 1);
  }
}

void 
ST7735R::draw_char(char c)
{
  if (c >= ' ')
    for (uint8_t i = 0; i < FONT_WIDTH; i++) {
    uint8_t line = pgm_read_byte(font + (c*(FONT_WIDTH)) + i);
    for (uint8_t j = 0; j < FONT_HEIGHT; j++) {
      if (line & 0x1) {
	if (m_size == 1)
	  draw_pixel(m_x + i, m_y + j);
	else {
	  fill_rect(m_x + i*m_size, m_y + j*m_size, m_size, m_size);
	} 
      }
      line >>= 1;
    }
  }
  m_x += m_size * (FONT_WIDTH + CHAR_SPACING);
  if (m_x > SCREEN_WIDTH || c == '\n') {
    m_x = 0;
    m_y += m_size * (FONT_HEIGHT + LINE_SPACING);
    if (m_y > SCREEN_HEIGHT) m_y = 0;
  }
}

void 
ST7735R::draw_string(char* s)
{
  char c;
  while ((c = *s++) != 0) draw_char(c);
}

void 
ST7735R::draw_string_P(const char* s)
{
  char c;
  while ((c = pgm_read_byte(s++)) != 0) draw_char(c);
}

uint8_t ST7735R::font[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00,   
  0x3E, 0x5B, 0x4F, 0x5B, 0x3E, 	
  0x3E, 0x6B, 0x4F, 0x6B, 0x3E, 	
  0x1C, 0x3E, 0x7C, 0x3E, 0x1C, 
  0x18, 0x3C, 0x7E, 0x3C, 0x18, 
  0x1C, 0x57, 0x7D, 0x57, 0x1C, 
  0x1C, 0x5E, 0x7F, 0x5E, 0x1C, 
  0x00, 0x18, 0x3C, 0x18, 0x00, 
  0xFF, 0xE7, 0xC3, 0xE7, 0xFF, 
  0x00, 0x18, 0x24, 0x18, 0x00, 
  0xFF, 0xE7, 0xDB, 0xE7, 0xFF, 
  0x30, 0x48, 0x3A, 0x06, 0x0E, 
  0x26, 0x29, 0x79, 0x29, 0x26, 
  0x40, 0x7F, 0x05, 0x05, 0x07, 
  0x40, 0x7F, 0x05, 0x25, 0x3F, 
  0x5A, 0x3C, 0xE7, 0x3C, 0x5A, 
  0x7F, 0x3E, 0x1C, 0x1C, 0x08, 
  0x08, 0x1C, 0x1C, 0x3E, 0x7F, 
  0x14, 0x22, 0x7F, 0x22, 0x14, 
  0x5F, 0x5F, 0x00, 0x5F, 0x5F, 
  0x06, 0x09, 0x7F, 0x01, 0x7F, 
  0x00, 0x66, 0x89, 0x95, 0x6A, 
  0x60, 0x60, 0x60, 0x60, 0x60, 
  0x94, 0xA2, 0xFF, 0xA2, 0x94, 
  0x08, 0x04, 0x7E, 0x04, 0x08, 
  0x10, 0x20, 0x7E, 0x20, 0x10, 
  0x08, 0x08, 0x2A, 0x1C, 0x08, 
  0x08, 0x1C, 0x2A, 0x08, 0x08, 
  0x1E, 0x10, 0x10, 0x10, 0x10, 
  0x0C, 0x1E, 0x0C, 0x1E, 0x0C, 
  0x30, 0x38, 0x3E, 0x38, 0x30, 
  0x06, 0x0E, 0x3E, 0x0E, 0x06, 
  0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x5F, 0x00, 0x00, 
  0x00, 0x07, 0x00, 0x07, 0x00, 
  0x14, 0x7F, 0x14, 0x7F, 0x14, 
  0x24, 0x2A, 0x7F, 0x2A, 0x12, 
  0x23, 0x13, 0x08, 0x64, 0x62, 
  0x36, 0x49, 0x56, 0x20, 0x50, 
  0x00, 0x08, 0x07, 0x03, 0x00, 
  0x00, 0x1C, 0x22, 0x41, 0x00, 
  0x00, 0x41, 0x22, 0x1C, 0x00, 
  0x2A, 0x1C, 0x7F, 0x1C, 0x2A, 
  0x08, 0x08, 0x3E, 0x08, 0x08, 
  0x00, 0x80, 0x70, 0x30, 0x00, 
  0x08, 0x08, 0x08, 0x08, 0x08, 
  0x00, 0x00, 0x60, 0x60, 0x00, 
  0x20, 0x10, 0x08, 0x04, 0x02, 
  0x3E, 0x51, 0x49, 0x45, 0x3E, 
  0x00, 0x42, 0x7F, 0x40, 0x00, 
  0x72, 0x49, 0x49, 0x49, 0x46, 
  0x21, 0x41, 0x49, 0x4D, 0x33, 
  0x18, 0x14, 0x12, 0x7F, 0x10, 
  0x27, 0x45, 0x45, 0x45, 0x39, 
  0x3C, 0x4A, 0x49, 0x49, 0x31, 
  0x41, 0x21, 0x11, 0x09, 0x07, 
  0x36, 0x49, 0x49, 0x49, 0x36, 
  0x46, 0x49, 0x49, 0x29, 0x1E, 
  0x00, 0x00, 0x14, 0x00, 0x00, 
  0x00, 0x40, 0x34, 0x00, 0x00, 
  0x00, 0x08, 0x14, 0x22, 0x41, 
  0x14, 0x14, 0x14, 0x14, 0x14, 
  0x00, 0x41, 0x22, 0x14, 0x08, 
  0x02, 0x01, 0x59, 0x09, 0x06, 
  0x3E, 0x41, 0x5D, 0x59, 0x4E, 
  0x7C, 0x12, 0x11, 0x12, 0x7C, 
  0x7F, 0x49, 0x49, 0x49, 0x36, 
  0x3E, 0x41, 0x41, 0x41, 0x22, 
  0x7F, 0x41, 0x41, 0x41, 0x3E, 
  0x7F, 0x49, 0x49, 0x49, 0x41, 
  0x7F, 0x09, 0x09, 0x09, 0x01, 
  0x3E, 0x41, 0x41, 0x51, 0x73, 
  0x7F, 0x08, 0x08, 0x08, 0x7F, 
  0x00, 0x41, 0x7F, 0x41, 0x00, 
  0x20, 0x40, 0x41, 0x3F, 0x01, 
  0x7F, 0x08, 0x14, 0x22, 0x41, 
  0x7F, 0x40, 0x40, 0x40, 0x40, 
  0x7F, 0x02, 0x1C, 0x02, 0x7F, 
  0x7F, 0x04, 0x08, 0x10, 0x7F, 
  0x3E, 0x41, 0x41, 0x41, 0x3E, 
  0x7F, 0x09, 0x09, 0x09, 0x06, 
  0x3E, 0x41, 0x51, 0x21, 0x5E, 
  0x7F, 0x09, 0x19, 0x29, 0x46, 
  0x26, 0x49, 0x49, 0x49, 0x32, 
  0x03, 0x01, 0x7F, 0x01, 0x03, 
  0x3F, 0x40, 0x40, 0x40, 0x3F, 
  0x1F, 0x20, 0x40, 0x20, 0x1F, 
  0x3F, 0x40, 0x38, 0x40, 0x3F, 
  0x63, 0x14, 0x08, 0x14, 0x63, 
  0x03, 0x04, 0x78, 0x04, 0x03, 
  0x61, 0x59, 0x49, 0x4D, 0x43, 
  0x00, 0x7F, 0x41, 0x41, 0x41, 
  0x02, 0x04, 0x08, 0x10, 0x20, 
  0x00, 0x41, 0x41, 0x41, 0x7F, 
  0x04, 0x02, 0x01, 0x02, 0x04, 
  0x40, 0x40, 0x40, 0x40, 0x40, 
  0x00, 0x03, 0x07, 0x08, 0x00, 
  0x20, 0x54, 0x54, 0x78, 0x40, 
  0x7F, 0x28, 0x44, 0x44, 0x38, 
  0x38, 0x44, 0x44, 0x44, 0x28, 
  0x38, 0x44, 0x44, 0x28, 0x7F, 
  0x38, 0x54, 0x54, 0x54, 0x18, 
  0x00, 0x08, 0x7E, 0x09, 0x02, 
  0x18, 0xA4, 0xA4, 0x9C, 0x78, 
  0x7F, 0x08, 0x04, 0x04, 0x78, 
  0x00, 0x44, 0x7D, 0x40, 0x00, 
  0x20, 0x40, 0x40, 0x3D, 0x00, 
  0x7F, 0x10, 0x28, 0x44, 0x00, 
  0x00, 0x41, 0x7F, 0x40, 0x00, 
  0x7C, 0x04, 0x78, 0x04, 0x78, 
  0x7C, 0x08, 0x04, 0x04, 0x78, 
  0x38, 0x44, 0x44, 0x44, 0x38, 
  0xFC, 0x18, 0x24, 0x24, 0x18, 
  0x18, 0x24, 0x24, 0x18, 0xFC, 
  0x7C, 0x08, 0x04, 0x04, 0x08, 
  0x48, 0x54, 0x54, 0x54, 0x24, 
  0x04, 0x04, 0x3F, 0x44, 0x24, 
  0x3C, 0x40, 0x40, 0x20, 0x7C, 
  0x1C, 0x20, 0x40, 0x20, 0x1C, 
  0x3C, 0x40, 0x30, 0x40, 0x3C, 
  0x44, 0x28, 0x10, 0x28, 0x44, 
  0x4C, 0x90, 0x90, 0x90, 0x7C, 
  0x44, 0x64, 0x54, 0x4C, 0x44, 
  0x00, 0x08, 0x36, 0x41, 0x00, 
  0x00, 0x00, 0x77, 0x00, 0x00, 
  0x00, 0x41, 0x36, 0x08, 0x00, 
  0x02, 0x01, 0x02, 0x04, 0x02, 
  0x3C, 0x26, 0x23, 0x26, 0x3C, 
  0x1E, 0xA1, 0xA1, 0x61, 0x12, 
  0x3A, 0x40, 0x40, 0x20, 0x7A, 
  0x38, 0x54, 0x54, 0x55, 0x59, 
  0x21, 0x55, 0x55, 0x79, 0x41, 
  0x21, 0x54, 0x54, 0x78, 0x41, 
  0x21, 0x55, 0x54, 0x78, 0x40, 
  0x20, 0x54, 0x55, 0x79, 0x40, 
  0x0C, 0x1E, 0x52, 0x72, 0x12, 
  0x39, 0x55, 0x55, 0x55, 0x59, 
  0x39, 0x54, 0x54, 0x54, 0x59, 
  0x39, 0x55, 0x54, 0x54, 0x58, 
  0x00, 0x00, 0x45, 0x7C, 0x41, 
  0x00, 0x02, 0x45, 0x7D, 0x42, 
  0x00, 0x01, 0x45, 0x7C, 0x40, 
  0xF0, 0x29, 0x24, 0x29, 0xF0, 
  0xF0, 0x28, 0x25, 0x28, 0xF0, 
  0x7C, 0x54, 0x55, 0x45, 0x00, 
  0x20, 0x54, 0x54, 0x7C, 0x54, 
  0x7C, 0x0A, 0x09, 0x7F, 0x49, 
  0x32, 0x49, 0x49, 0x49, 0x32, 
  0x32, 0x48, 0x48, 0x48, 0x32, 
  0x32, 0x4A, 0x48, 0x48, 0x30, 
  0x3A, 0x41, 0x41, 0x21, 0x7A, 
  0x3A, 0x42, 0x40, 0x20, 0x78, 
  0x00, 0x9D, 0xA0, 0xA0, 0x7D, 
  0x39, 0x44, 0x44, 0x44, 0x39, 
  0x3D, 0x40, 0x40, 0x40, 0x3D, 
  0x3C, 0x24, 0xFF, 0x24, 0x24, 
  0x48, 0x7E, 0x49, 0x43, 0x66, 
  0x2B, 0x2F, 0xFC, 0x2F, 0x2B, 
  0xFF, 0x09, 0x29, 0xF6, 0x20, 
  0xC0, 0x88, 0x7E, 0x09, 0x03, 
  0x20, 0x54, 0x54, 0x79, 0x41, 
  0x00, 0x00, 0x44, 0x7D, 0x41, 
  0x30, 0x48, 0x48, 0x4A, 0x32, 
  0x38, 0x40, 0x40, 0x22, 0x7A, 
  0x00, 0x7A, 0x0A, 0x0A, 0x72, 
  0x7D, 0x0D, 0x19, 0x31, 0x7D, 
  0x26, 0x29, 0x29, 0x2F, 0x28, 
  0x26, 0x29, 0x29, 0x29, 0x26, 
  0x30, 0x48, 0x4D, 0x40, 0x20, 
  0x38, 0x08, 0x08, 0x08, 0x08, 
  0x08, 0x08, 0x08, 0x08, 0x38, 
  0x2F, 0x10, 0xC8, 0xAC, 0xBA, 
  0x2F, 0x10, 0x28, 0x34, 0xFA, 
  0x00, 0x00, 0x7B, 0x00, 0x00, 
  0x08, 0x14, 0x2A, 0x14, 0x22, 
  0x22, 0x14, 0x2A, 0x14, 0x08, 
  0xAA, 0x00, 0x55, 0x00, 0xAA, 
  0xAA, 0x55, 0xAA, 0x55, 0xAA, 
  0x00, 0x00, 0x00, 0xFF, 0x00, 
  0x10, 0x10, 0x10, 0xFF, 0x00, 
  0x14, 0x14, 0x14, 0xFF, 0x00, 
  0x10, 0x10, 0xFF, 0x00, 0xFF, 
  0x10, 0x10, 0xF0, 0x10, 0xF0, 
  0x14, 0x14, 0x14, 0xFC, 0x00, 
  0x14, 0x14, 0xF7, 0x00, 0xFF, 
  0x00, 0x00, 0xFF, 0x00, 0xFF, 
  0x14, 0x14, 0xF4, 0x04, 0xFC, 
  0x14, 0x14, 0x17, 0x10, 0x1F, 
  0x10, 0x10, 0x1F, 0x10, 0x1F, 
  0x14, 0x14, 0x14, 0x1F, 0x00, 
  0x10, 0x10, 0x10, 0xF0, 0x00, 
  0x00, 0x00, 0x00, 0x1F, 0x10, 
  0x10, 0x10, 0x10, 0x1F, 0x10, 
  0x10, 0x10, 0x10, 0xF0, 0x10, 
  0x00, 0x00, 0x00, 0xFF, 0x10, 
  0x10, 0x10, 0x10, 0x10, 0x10, 
  0x10, 0x10, 0x10, 0xFF, 0x10, 
  0x00, 0x00, 0x00, 0xFF, 0x14, 
  0x00, 0x00, 0xFF, 0x00, 0xFF, 
  0x00, 0x00, 0x1F, 0x10, 0x17, 
  0x00, 0x00, 0xFC, 0x04, 0xF4, 
  0x14, 0x14, 0x17, 0x10, 0x17, 
  0x14, 0x14, 0xF4, 0x04, 0xF4, 
  0x00, 0x00, 0xFF, 0x00, 0xF7, 
  0x14, 0x14, 0x14, 0x14, 0x14, 
  0x14, 0x14, 0xF7, 0x00, 0xF7, 
  0x14, 0x14, 0x14, 0x17, 0x14, 
  0x10, 0x10, 0x1F, 0x10, 0x1F, 
  0x14, 0x14, 0x14, 0xF4, 0x14, 
  0x10, 0x10, 0xF0, 0x10, 0xF0, 
  0x00, 0x00, 0x1F, 0x10, 0x1F, 
  0x00, 0x00, 0x00, 0x1F, 0x14, 
  0x00, 0x00, 0x00, 0xFC, 0x14, 
  0x00, 0x00, 0xF0, 0x10, 0xF0, 
  0x10, 0x10, 0xFF, 0x10, 0xFF, 
  0x14, 0x14, 0x14, 0xFF, 0x14, 
  0x10, 0x10, 0x10, 0x1F, 0x00, 
  0x00, 0x00, 0x00, 0xF0, 0x10, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 
  0xFF, 0xFF, 0xFF, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xFF, 0xFF, 
  0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 
  0x38, 0x44, 0x44, 0x38, 0x44, 
  0x7C, 0x2A, 0x2A, 0x3E, 0x14, 
  0x7E, 0x02, 0x02, 0x06, 0x06, 
  0x02, 0x7E, 0x02, 0x7E, 0x02, 
  0x63, 0x55, 0x49, 0x41, 0x63, 
  0x38, 0x44, 0x44, 0x3C, 0x04, 
  0x40, 0x7E, 0x20, 0x1E, 0x20, 
  0x06, 0x02, 0x7E, 0x02, 0x02, 
  0x99, 0xA5, 0xE7, 0xA5, 0x99, 
  0x1C, 0x2A, 0x49, 0x2A, 0x1C, 
  0x4C, 0x72, 0x01, 0x72, 0x4C, 
  0x30, 0x4A, 0x4D, 0x4D, 0x30, 
  0x30, 0x48, 0x78, 0x48, 0x30, 
  0xBC, 0x62, 0x5A, 0x46, 0x3D, 
  0x3E, 0x49, 0x49, 0x49, 0x00, 
  0x7E, 0x01, 0x01, 0x01, 0x7E, 
  0x2A, 0x2A, 0x2A, 0x2A, 0x2A, 
  0x44, 0x44, 0x5F, 0x44, 0x44, 
  0x40, 0x51, 0x4A, 0x44, 0x40, 
  0x40, 0x44, 0x4A, 0x51, 0x40, 
  0x00, 0x00, 0xFF, 0x01, 0x03, 
  0xE0, 0x80, 0xFF, 0x00, 0x00, 
  0x08, 0x08, 0x6B, 0x6B, 0x08,
  0x36, 0x12, 0x36, 0x24, 0x36, 
  0x06, 0x0F, 0x09, 0x0F, 0x06, 
  0x00, 0x00, 0x18, 0x18, 0x00, 
  0x00, 0x00, 0x10, 0x10, 0x00, 
  0x30, 0x40, 0xFF, 0x01, 0x01, 
  0x00, 0x1F, 0x01, 0x01, 0x1E, 
  0x00, 0x19, 0x1D, 0x17, 0x12, 
  0x00, 0x3C, 0x3C, 0x3C, 0x3C, 
  0x00, 0x00, 0x00, 0x00, 0x00, 
};

